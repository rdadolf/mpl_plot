# MPL Boilerplate
import numpy as np
import matplotlib
import json
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib import rcParams
import matplotlib.cm as cm
import matplotlib.colors
import matplotlib.patches
import matplotlib as mpl
def rgb(r,g,b):
    return (float(r)/256.,float(g)/256.,float(b)/256.)
# Plot colors:
#   visually distinct under colorblindness and grayscale
crimson = rgb(172,63,64)
blue    = rgb(62,145,189)
teal    = rgb(98,189,153)
orange  = rgb(250,174,83)
#   luminance channel sweeps from dark to light, (for ordered comparisons)
clr = [crimson, blue, teal, orange]
def make_clr(n_colors):
  '''Return an array of n_colors colors, interpolated from the primary four.'''
  # Not the most efficient thing in the world...
  source_xs = np.arange(0,4)*n_colors/4.
  source_ys = zip(*[crimson,blue,teal,orange])
  dest_xs = np.arange(0,n_colors)
  dest_ys = np.array([np.interp(dest_xs,source_xs,source_y) for source_y in source_ys]).T.tolist()
  return dest_ys

mrk = ['o','D','^','s']
rcParams['figure.figsize'] = (8,6) # (w,h)
rcParams['figure.dpi'] = 150
# !$%ing matplotlib broke the interface. Why would you *replace* this!? >:(
try:
  from cycler import cycler
  rcParams['axes.prop_cycle'] = cycler('color',clr)
except ImportError:
  rcParams['axes.color_cycle'] = clr
rcParams['lines.linewidth'] = 2
rcParams['lines.marker'] = None
rcParams['lines.markeredgewidth'] = 0
rcParams['axes.facecolor'] = 'white'
rcParams['font.size'] = 22
rcParams['patch.edgecolor'] = 'black'
rcParams['patch.facecolor'] = clr[0]
rcParams['xtick.major.pad'] = 8
rcParams['xtick.minor.pad'] = 8
rcParams['ytick.major.pad'] = 8
rcParams['ytick.minor.pad'] = 8
#rcParams['font.family'] = 'Helvetica'
#rcParams['font.family'] = 'Liberation Sans'
rcParams['font.weight'] = 100


class Cacher(object):
  '''Mix-in class for storing a snapshot of data.'''
  def _save(self, blob, filename='cache.json'):
    with open(filename,'w') as fp:
      json.dump(blob, fp)
      print '[MemoPlot]: File "'+str(filename)+'" saved.'

  def _load(self, filename='cache.json'):
    with open(filename,'r') as fp:
      blob = json.load(fp)
      print '[MemoPlot]: File "'+str(filename)+'" loaded.'
      return blob

class MemoPlot(Cacher):
  '''Abstract base class for a reproducible, persistable, and memoizing plotter.'''
  def __init__(self, mpl_params={}):
    # three JSON objects
    self.data = {} # data, generated by generate
    self.mpl_params = mpl_params # plotting kwargs
    self.config = {} # settings used for plotting

  def generate(self):
    '''Override this function to collect data for a plot.'''
    pass

  def plot(self, ax):
    '''Override this function to reproduce the plot from saved data.'''
    ax.plot(self.data, **self.mpl_params)

  def save(self, filename='memoplot.json'):
    D = {
      'data': self.data,
      'mpl_params': self.mpl_params,
      'config': self.config
    }
    self._save(D,filename)

  def load(self, filename='memoplot.json'):
    D = self._load(filename)
    self.data = D['data']
    self.mpl_params = D['mpl_params']
    self.config = D['config']
